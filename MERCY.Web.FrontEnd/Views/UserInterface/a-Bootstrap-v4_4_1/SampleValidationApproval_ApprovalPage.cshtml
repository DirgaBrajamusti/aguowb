@using MERCY.Web.FrontEnd.Helpers;
@using System.Configuration;

@{
    string ui_name = @"a-Bootstrap-v4_4_1";
    UserInterface userInterface = new UserInterface(ui_name);
    string ui_Folder_ServerSide = userInterface.Folder_ServerSide;
    string ui_Folder_Client_Side = userInterface.Folder_ClientSide;

    Layout = ui_Folder_ServerSide + "_Layout.cshtml";
}

<style>
    div.dataTables_wrapper {
        width: 100% !important;
    }

    .card {
        max-height: 450px;
        overflow: auto !important;
    }

    .max-table {
        max-height: 450px;
        overflow: auto !important;
    }

    .history-icon {
        cursor: pointer;
    }

    .modal-xl {
        max-width: 1050px;
    }

    .history-change {
        color: #FA6400;
    }

    .table-overflow {
        overflow: auto !important;
    }
</style>

<div class="col margin_padding_0 mercy_box_inner">
    <div class="row margin_padding_0 mercy_page_Title">
        Analysis Result Approve
    </div>
    <div class="row margin_padding_0 mercy_page_Title_2">
        Validation & Approval > Analysis Result Approve
    </div>
    <div class="card p-4">
        <div class="d-flex">
            <button id="btnApprove" type="button" class="btn btn-info mr-3" onclick="approveAnalysis()">Approve</button>
            <button type="button" class="btn btn-outline-info" onclick="closePage()">Close</button>
        </div>
        <div class="max-table mt-3">
            <table id="mercyTable" class="nowrap table table-striped table-hover mercy_table mercy_table_header" style="width:100%;"></table>
        </div>
    </div>
</div>
<div id="modalHistory" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-xl">
        <div class="modal-content">
            <div class="modal-body px-5" style="padding-top: 22px;">
                <div class="d-flex">
                    <div>
                        <h4 class="px-2">Approve History</h4>
                    </div>
                    <div>
                        <img src="/images/spinner.gif" id="imgLoadingHistory" />
                    </div>
                </div>
                <div class="table-overflow mt-3">
                    <table id="tableHistory" class="display nowrap table table-striped table-hover mercy_table mercy_table_header" style="width:100%;"></table>
                </div>
                <div class="my-3 d-flex flex-row justify-content-between">
                    <div class="d-flex flex-row">
                        <button id="btnClose" type="button" class="btn btn-outline-info w-100 mr-1" onclick="closeModal()">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="modalSession" class="modal fade" role="dialog">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-body" style="padding-top: 22px;">
                <div class="d-flex flex-column">
                    <p class="align-self-center">Your session is expired, do you want to extend the time ?</p>
                </div>
                <div class="my-3 d-flex flex-column">
                    <div class="w-50 d-flex flex-row align-self-center">
                        <button id="btnExtend" type="button" class="btn btn-info w-100 mr-1" onclick="extendSession()">Extend</button>
                        <button id="btnCloseSession" type="button" class="btn btn-outline-info w-100 mx-1" onclick="Close_Session()">Close Session</button>
                        <div id="spinnerSessionContainer" class="d-none ml-1">
                            <div id="spinnerSession" class="spinner-border text-success" role="status">
                                <span class="sr-only">Loading...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    var approvalTable = null;
    var historyTable = null;
    var resultValidation = {};
    var historyData = {};
    var permission = null;
    let decimalConfig = 0;
    let exceptDecimal = null;
    let foundExcept = null;

    $(document).ready(function () {
        $(document).attr('title', 'Validation & Approval - Analysis Result Approve: Mercy');

        get_user_menu = '1';
        get_user_relation = '1';

        showUserInformation();
        showSessionModal();

        mappingColumn();
        $("#btnApprove").prop('disabled', true);
    });

    function showUserInformation() {
        // data from AJAX
        $.ajax({
            url: api_Request + '/Api/User/Info'
            , type: 'POST'
            , data: { u_menu: get_user_menu, u_relation: get_user_relation }
            , dataType: "json"
            , beforeSend: function (request) {
                request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
            }
            , cache: false
            , success: function (data) {
                if (!$.trim(data)) {
                    // empty data
                    return;
                }

                if (!data.Success) {
                    window.location('/');
                    return;
                }

                after_GetUserInfo(data.User);
                uInfo = data.User;

                // reset
                get_user_menu = '0';
                get_user_relation = '0';
            }
            , error: function (error) {
                $(this).remove();
            }
        });
    }

    function mappingColumn() {
        $.ajax({
            url: api_Request + '/Api/AnalysisResultValidation'
            , type: 'GET'
            , data: { analysisJobId: paramid }
            , dataType: "json"
            , beforeSend: function (request) {
                request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
            }
            , cache: false
            , success: function (data) {
                if (!$.trim(data)) {
                    // empty data
                    return;
                }

                if (!data.Success) {
                    alert(data.Message);
                    window.location('/');

                    return;
                }

                permission = data.Permission;
                resultValidation = data;
                resultValidation.rules = JSON.parse(resultValidation.rules);

                // add some configuration
                decimalConfig = Get_Decimal_Config();
                exceptDecimal = Get_Except_Decimal_Config();

                // Initiate
                let columnList = [];
                let column = {}

                // Static for two column first
                column = {
                    title: "",
                    data: "Id",
                    render: function (data, type, full, meta) {
                        return `<img src="/images/ic-history-validate-approval.png" title="Validation History" class="history-icon" onclick="showModalHistory(${full.Id})"/>`
                    }
                }
                columnList.push(column);
                column = {
                    sTitle: `<input type='checkbox' id='selectAll' name="approve" onclick="checkAll()"></input>`,
                    data: "Status",
                    render: function (data, type, full, meta) {
                        return full.Status === 'Approved' ? '' : `<input type='checkbox' id='select_${meta.row}' name="approve" onclick=singleCheck()></input>`
                    }
                }
                columnList.push(column);

                // Dynamic Column & Detect if Column is input/no
                resultValidation.rules.rules.forEach(function (col) {
                    if (col.input) {
                        column = {
                            title: col.header,
                            data: col.attribute,
                            render: function (data, type, full, meta) {
                                return `<input type='number' id=${col.attribute}_${meta.row} val=${meta.row} name=${col.attribute} value=${full[col.attribute]}>`
                            }
                        }
                    } else {
                        column = {
                            title: col.header,
                            data: col.attribute,
                            render: function (data, type, full, meta) {
                                let param = col.attribute;
                                if (param.toLowerCase().includes("cv")) {
                                    param = "cv";
                                }
                                if (param.toLowerCase().includes("size")) {
                                    param = "size";
                                }
                                foundExcept = exceptDecimal.findIndex(el => el === param);

                                return (typeof (full[col.attribute]) === "number") && (foundExcept === -1) ? Number(parseFloat(full[col.attribute]).toFixed(decimalConfig)) : typeof (full[col.attribute]) === "number" ? Math.round(full[col.attribute]) : full[col.attribute];
                            }
                        }
                    }
                    columnList.push(column);
                })

                createMercyTable(columnList, resultValidation.Items);
            }
            , error: function (error) {
                $(this).remove();
            }
        });
    }

    function Get_Decimal_Config() {
        var num = "@ConfigurationManager.AppSettings["Decimal_Config"]";
        return Number(num);
    }

    function Get_Except_Decimal_Config() {
        var list = "@ConfigurationManager.AppSettings["Decimal_Config_Except"]";
        return list.split(",");
    }

    function createMercyTable(columns, list) {
        approvalTable = $('#mercyTable').DataTable({
            bAutoWidth: false,
            bFilter: false,
            bPaginate: false,
            bInfo: false,
            columnDefs: [
                {
                    targets: "_all",
                    orderable: false,
                    defaultContent: ""
                }
            ],
            columns: columns
        })

        approvalTable.on('draw', function () { });

        list.forEach(function (data) {
            approvalTable.row.add(data).draw(false);
        })
    }

    function closePage() {
        Close_Session();
    }

    function showModalHistory(id) {
        if (historyTable) {
            historyTable.clear().destroy()
        }

        $("#imgLoadingHistory").show();
        $("#modalHistory").appendTo('body').modal();

        $.ajax({
            url: api_Request + '/Api/AnalysisResultValidation/History',
            type: 'GET',
            data: { SampleId: id, IsApproval: true },
            dataType: "json",
            beforeSend: function (request) {
                request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
            },
            cache: false,
            success: function (data) {
                if (!$.trim(data)) {
                    // empty data
                    return;
                }

                if (!data.Success) {
                    alert(data.Message)
                    return;
                }

                historyData = data;
                createTableModal();
            },
            error: function (error) {
                $("#btnValidate").text('Validate');
                $(this).remove();
            }
        });
    }

    function createTableModal(data) {
        historyData.rules = JSON.parse(historyData.rules);

        let column = {};
        let columnList = [];
        // Dynamic Column & Detect if Column is input/no
        historyData.rules.rules.forEach(function (col) {
            column = {
                title: col.header,
                data: col.attribute,
                render: function (data, type, full, meta) {
                    let param = col.attribute;
                    if (param.toLowerCase().includes("cv")) {
                        param = "cv";
                    }
                    if (param.toLowerCase().includes("size")) {
                        param = "size";
                    }
                    foundExcept = exceptDecimal.findIndex(el => el.toLowerCase() === param);

                    if (meta.row - 1 === -1) {
                        return (typeof (full[col.attribute]) === "number") && (foundExcept === -1) ? Number(parseFloat(full[col.attribute]).toFixed(decimalConfig)) : typeof (full[col.attribute]) === "number" ? Math.round(full[col.attribute]) : full[col.attribute];
                    }

                    let previousData = historyTable.row(meta.row - 1).data();

                    let previousVal = (typeof (previousData[col.attribute]) === "number") && (foundExcept === -1) ? Number(parseFloat(previousData[col.attribute]).toFixed(decimalConfig)) : typeof (previousData[col.attribute]) === "number" ? Math.round(previousData[col.attribute]) : previousData[col.attribute];
                    let afterVal = (typeof (full[col.attribute]) === "number") && (foundExcept === -1) ? Number(parseFloat(full[col.attribute]).toFixed(decimalConfig)) : typeof (full[col.attribute]) === "number" ? Math.round(full[col.attribute]) : full[col.attribute];

                    return `<span class="${afterVal !== previousVal ? 'history-change' : ''}" >${afterVal}</span>`
                }
            }
            columnList.push(column);
        })

        historyTable = $('#tableHistory').DataTable({
            bAutoWidth: false,
            bFilter: false,
            bPaginate: false,
            bInfo: false,
            columnDefs: [
                {
                    targets: "_all",
                    orderable: false,
                    defaultContent: ""
                }
            ],
            columns: columnList
        })

        historyTable.on('draw', function () { });

        historyData.Items.forEach(function (data) {
            historyTable.row.add(data).draw(false);
        })
        $("#imgLoadingHistory").hide();
    }

    function closeModal() {
        $("#modalHistory").modal('toggle');
    }

    function checkAll() {
        $("input[name='approve']").not(this).prop('checked', $("#selectAll").is(":checked"));

        if ($("input[name='approve']").is(':checked')) {
            if (permission && permission.Is_Approve) {
                $("#btnApprove").prop('disabled', false);
            }
            return;
        }

        $("#btnApprove").prop('disabled', true);
    }

    function singleCheck() {
        var dataList = approvalTable.rows().data().toArray().length;
        var len = $("input[name='approve']:checked").not("#selectAll").length;

        if (len === dataList) {
            $("#selectAll").prop('checked', true);
        } else {
            $("#selectAll").prop('checked', false);
        }

        if ($("input[name='approve']").is(':checked')) {
            if (permission && permission.Is_Approve) {
                $("#btnApprove").prop('disabled', false);
            }
            return;
        }

        $("#btnApprove").prop('disabled', true);
    }

    function approveAnalysis() {
        $("#btnApprove").text('Loading...');

        let listSamples = [];
        approvalTable.rows().data().toArray().forEach(function (data, idx) {
            if ($(`#select_${idx}`).is(':checked')) {
                listSamples.push(data.Id);
            }
        })

        // data from AJAX
        $.ajax({
            url: api_Request + '/Api/AnalysisResultValidation/Approve',
            type: 'POST',
            data: { sampleIds: listSamples },
            dataType: "json",
            beforeSend: function (request) {
                request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
            },
            cache: false,
            success: function (data) {
                if (!$.trim(data)) {
                    // empty data
                    return;
                }

                if (!data.Success) {
                    alert(data.Message)
                    return;
                }

                sendEmail(listSamples);
            },
            error: function (error) {
                $("#btnApprove").text('Approve');
                $(this).remove();
            }
        });
    }

    function Close_Session() {
        let SecuritySession = JSON.parse(localStorage.getItem('SecuritySession'));
        $('#btnApprove').prop('disabled', true);

        $.ajax({
            url: api_Request + '/Api/Session/CloseSession',
            type: 'GET',
            data: { menus: SecuritySession },
            dataType: "json",
            cache: false,
            beforeSend: function (request) {
                request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
            },
            success: function (data) {
                if (!$.trim(data)) {
                    // empty data
                    return;
                }

                $('#btnApprove').prop('disabled', false);
                localStorage.removeItem('SecuritySession');
                window.location = mercyUrl("/SampleValidationApprovalv")
            },
            error: function (error) {
                alert(error);
            }
        });
    }

    function showSessionModal() {
        var timeoutData = JSON.parse(localStorage.getItem('SessionTime'));
        var now = moment(new Date(), 'YYYY-MM-DD HH:mm:ss');
        var extendTime = moment(timeoutData.ExtendSessionTime, 'YYYY-MM-DD HH:mm:ssZ');
        var timeout = moment.duration(extendTime.diff(now)).asMilliseconds();
        setTimeout(() => {
            $('#modalSession').appendTo('body').modal('show');
        }, timeout);
    }

    function closeSessionModal() {
        $('#modalSession').modal('hide');
    }

    function extendSession() {
        var securitySession = JSON.parse(localStorage.getItem('SecuritySession'));

        $('#spinnerSessionContainer').removeClass('d-none');
        $('#btnExtend').prop('disabled', true);
        $('#btnCloseSession').prop('disabled', true);
        $.ajax({
            url: api_Request + '/Api/Session/ClaimSession',
            type: 'GET',
            data: { menus: securitySession },
            dataType: "json",
            cache: false,
            beforeSend: function (request) {
                request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
            },
            success: function (data) {
                if (!$.trim(data)) {
                    // empty data
                    return;
                }

                if (!data.Success) {
                    alert(data.Message);
                    return;
                }

                localStorage.setItem('SessionTime', JSON.stringify(data.Items));
                $('#spinnerSessionContainer').addClass('d-none');
                $('#btnExtend').prop('disabled', false);
                $('#btnCloseSession').prop('disabled', false);

                closeSessionModal();
                showSessionModal();
            },
            error: function (error) {
                alert(error);
                return null;
            }
        });
    }
    function sendEmail(listSamples) {
        // data from AJAX
        $.ajax({
            url: api_Request + '/Api/Notification/Analysis_Result_Approve',
            type: 'POST',
            data: { sampleIds: listSamples },
            dataType: "json",
            beforeSend: function (request) {
                request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
            },
            cache: false,
            success: function (data) {
                $("#btnValidate").text('Validate');
                if (!$.trim(data)) {
                    // empty data
                    return;
                }

                if (!data.Success) {
                    alert(data.Message)
                    return;
                }

                alert("Success");
                window.location = mercyUrl("/SampleValidationApprovalv")
            },
            error: function (error) {
                $("#btnValidate").text('Validate');
                $(this).remove();
            }
        });
    }
</script>