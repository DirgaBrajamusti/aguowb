@using MERCY.Web.FrontEnd.Helpers;

@{
    string ui_name               = @"a-Bootstrap-v4_4_1";
    UserInterface userInterface  = new UserInterface(ui_name);
    string ui_Folder_ServerSide  = userInterface.Folder_ServerSide;
    string ui_Folder_Client_Side = userInterface.Folder_ClientSide;

    Layout = ui_Folder_ServerSide + "_Layout.cshtml";
}

<style>
#id_menu_ROMTransfer {
    background-color: #000000;
    border-radius: 4px;
    /*opacity: 0.2;*/
    background: rgba(0,0,0,0.2);
    height: 52px;
    margin: 5px 8px;
}

.filter_title {
    color: #232323;
    font-family: 'OpenSans-SemiBold';
    font-size: 14px;
    font-weight: 700;
    line-height: 17px;
    opacity: 0.8700000047683716;
    text-align: left;
    height: 20px;
}
</style>

<link href="@ui_Folder_Client_Side/css/select2.min.css" rel="stylesheet" />
<script src="@ui_Folder_Client_Side/js/select2.min.js"></script>

<div class="col margin_padding_0">
    <div class="row margin_padding_0 mercy_page_Title">
        Instruments
    </div>
    <div class="row margin_padding_0 mercy_page_Title_2">
        Instruments
    </div>
    <div>
        <div class="row margin_padding_0" style="margin-bottom:20px !important;">
            <div class="col-12 col-md-auto margin_padding_0" style="margin-top:20px !important;">
                <div style="width: 190px;margin:auto;">
                    <div class="mercy_button" style="width:170px;" id="btnAdd"><div class="mercy_text_center">Add New Instrument</div></div>
                </div>
            </div>
            <div class="col-12 col-md-auto margin_padding_0" style="margin-top:20px !important;">
                <div style="width: 190px;margin:auto;">
                    <div class="mercy_button" style="width:170px;" id="btnSave"><div class="mercy_text_center">Save</div></div>
                </div>
            </div>
            <div class="col-12 col-md margin_padding_0"></div>
        </div>
    </div>
    <div class="row margin_padding_0 mercy_box_inner_content">
        <div class="col margin_padding_0" style="padding: 0px 20px !important;">
            <div class="row margin_padding_0" style="margin:20px 0px !important;">
                <select class="shadow-none custom-select d-block w-100 mercy_select mercy_input_text" id="ddl_InstrumentType" style="width:210px;">
                    <option>Lab Consumable</option>
                    <option>Lab Maintenance</option>
                </select>
            </div>
            <div class="row margin_padding_0">
                <table id="mercyTable" class="display nowrap table table-striped mercy_table mercy_table_header" style="width:100%;">
                    <thead>
                        <tr>
                            <th>RecordId</th>
                            <th>Action</th>
                            <th>No</th>
                            <th>Status</th>
                            <th>Instrument Name</th>
                            <th>Created Date</th>
                            <th>Created by</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">

// Flag
var first_Load = true;

// DataGrid
var obj_html_Table;

// row
var isNew = false;
var lineNumber_Data = 0;
var object_Created_Count = 0;
var object_id_additional = ''; // pattern is: '_' + object_Created_Count + '_' + lineNumber_Data;
var object_id_Created = [];
var object_id_Deleted = [];

$(document).ready(function (){
    $(document).attr('title', 'Unit Measurements - List : Mercy');

    $(window).resize(function (){
        resize_Table();
    });

    $('#btnAdd').click(function (e){
        // create "Record_Item"
        var item = {CreatedOn_Str:'', CreatedOn_Str2:'', FullName:'', RecordId:-1, InstrumentName:'', Status:false
                    , CreatedBy: 0, CreatedOn : null, LastModifiedBy : 0, LastModifiedOn : null}
        
        // flag for "New Record"
        isNew = true;
        
        // do "Counting"
        object_Created_Count++;
        lineNumber_Data++;
        object_id_additional = '_' + object_Created_Count.toString() + '_' + lineNumber_Data.toString();
        
        // save to Array
        object_id_Created.push(object_id_additional);
        
        // add to Table
        obj_html_Table.row.add(item).draw(false);
    });
    
    $('#btnSave').click(function (e){
        SaveData();
    });
    
    $('#btnViewData').click(function (e){
        Populate_DataGrid();
    });
    
    ddl_InstrumentType_Change_must_be_run = false;
    Create_InstrumentType();
    
    Load_Page_List();
});

function Clear_DataGrid_(p_id){
    try {
        $('#' + p_id).DataTable().clear().destroy();
        //$('#'+p_id).DataTable().destroy();
        //$('#'+p_id+' tbody').empty();
    }catch(err){}
}

function Clear_DataGrid(){
    Create_Table();
}

function Create_Table(){
    Clear_DataGrid_('mercyTable');

    try {
        obj_html_Table = $('#mercyTable').DataTable({
            "bAutoWidth": false
            , "bFilter": false
            , "dom": '<"top">rt<"bottom"iflp><"clear">'
            , "scrollX": true
            , "scrollY": false //"200px"
            //, "scrollCollapse": true
            , "paging": false
            //, "ordering": false
            , "columns": [
                { "data": "RecordId", "name": "RecordId", "autoWidth": true }
                , {
                    "render": function (data, type, full, meta){
                        return '<input type="hidden" id="data_RecordId' + object_id_additional + '" value="' + full.RecordId + '"/>' +
                               '<a href="#" id="data_link_Operation' + object_id_additional + '" onClick="javascript:processLink_Operation(this)" style="padding-right:10px;' + (isNew?'display:none;':'') + '">' + (isNew?'Cancel':'Edit') + '</a>' +
                               '<a href="#" id="data_link_Delete' + object_id_additional + '" onClick="javascript:processLink_Delete(this)">Delete</a>'
                               ;
                    }
                }
                , {
                    "render": function (data, type, full, meta){
                        return lineNumber_Data.toString() + '.';
                    }
                }
                , {
                    "render": function (data, type, full, meta){
                        return '<span id="data_Status_label' + object_id_additional + '" style="' + (isNew?'display:none;':'') + '">' + full.Status.toString().toUpperCase() + '</span>' +
                               '<input type="checkbox" id="data_Status_chk' + object_id_additional + '" class="shadow-none" ' + ' style="' + (isNew?'':'display:none;') + '"/>'
                               ;
                    }
                }
                , {
                    "render": function (data, type, full, meta){
                        return '<span id="data_InstrumentName_label' + object_id_additional + '">' + full.InstrumentName + '</span>' +
                               '<input type="text" id="data_InstrumentName_txt' + object_id_additional + '" class="shadow-none" value="" ' + ' style="' + (isNew?'':'display:none;') + '"/>'
                               ;
                    }
                }
                , { "data": "CreatedOn_Str", "name": "CreatedOn_Str", "autoWidth": true }
                , { "data": "FullName", "name": "FullName", "autoWidth": true }
            ]
            , "columnDefs": [{
                "targets": [0],
                "visible": false,
                "searchable": false
            }
                /*,{
                    "targets": [7],
                    "searchable": false,
                    "orderable": false
                }*/
            ]
            , "order": [[2, "asc"]]
        });

        obj_html_Table.on('draw', function () {});

        resize_Table();
    }catch(err){}
}

function Populate_DataGrid(){
    Clear_DataGrid();
    
    // reset
    lineNumber_Data = 0;
    object_id_Created = [];
    object_id_Deleted = [];
    
    // data from AJAX
    $.ajax({
        url: api_Request + '/Api/Instruments'
        , type: 'POST'
        , data: {u_menu:get_user_menu, u_relation:get_user_relation,InstrumentType:$('#ddl_InstrumentType').val()}
        , dataType: "json"
        , beforeSend: function (request){
            // Set "Token" in HTTP_Header
            request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
        }
        , cache: false
        , success: function (data){
            if ( ! $.trim(data)) {
                // empty data
                return;
            }
            
            if ( ! data.Success){
                alert(data.Message);
                
                window.location = '/NoAccess';
                return;
            }
            
            // Special Purpose, getting information of CurrentUser
            if (get_user_menu == '1'){
                after_GetUserInfo(data.User);
                uInfo = data.User;
                
                Create_Table();
                
                Populate_Data_ddl_Company();
            }
            
            // reset
            get_user_menu = '0';
            get_user_relation = '0';
            
            // we need "Permission" information
            permission = data.Permission;
            
            // make it "Intuitive"
            Display_Buttons();
            
            // assign Data to Table
            /*try {
                obj_html_Table.rows.add(data.Items); // add to DataTable instance
                obj_html_Table.draw(); // always redraw
            }catch(err){}*/
            
            data.Items.forEach(
                function (item){
                    isNew = false;
                    object_Created_Count++;
                    lineNumber_Data++;
                    object_id_additional = '_' + object_Created_Count.toString() + '_' + lineNumber_Data.toString();
                    
                    // save to Array
                    object_id_Created.push(object_id_additional);
                    
                    // add to Table
                    obj_html_Table.row.add(item).draw(false);
                }
            );
        },
        error: function (error){
            $(this).remove();
        }
    });
}

function processLink_Operation(p_this){
    // just reminder about Pattern
    // pattern is: {LABEL}'_' + object_Created_Count + '_' + lineNumber_Data;
    
    try {
        var target_id = p_this.id;
        var target_id_additional = target_id.replace('data_link_Operation', '');
        
        if ($('#' + target_id).text() == 'Edit'){
            // Firstly, copy data
            var isChecked = ($('#data_Status_label' + target_id_additional).text().toUpperCase() == 'TRUE');
            $('#data_Status_chk' + target_id_additional).prop("checked", isChecked);
            $('#data_InstrumentName_txt' + target_id_additional).val($('#data_InstrumentName_label' + target_id_additional).text());
            
            // Secondly, set Show/Hide
            $('#data_Status_label' + target_id_additional).hide();
            $('#data_Status_chk' + target_id_additional).show();
            $('#data_InstrumentName_label' + target_id_additional).hide();
            $('#data_InstrumentName_txt' + target_id_additional).show();
            
            // Change "Link"
            $('#' + target_id).text('Cancel');
        }else{
            // Set Show/Hide
            $('#data_Status_label' + target_id_additional).show();
            $('#data_Status_chk' + target_id_additional).hide();
            $('#data_InstrumentName_label' + target_id_additional).show();
            $('#data_InstrumentName_txt' + target_id_additional).hide();
            
            // Change "Link"
            $('#' + target_id).text('Edit');
        }
    }catch(err){}
}

function processLink_Delete(p_this){
    try {
        if (lineNumber_Data<=1){
            alert('Data is only 1. Please do not delete it!');
            return;
        }
        if (lineNumber_Data<= (object_id_Deleted.length+1)){
            alert('Enough for Delete!');
            return;
        }
        
        var target_id = p_this.id;
        var target_id_additional = target_id.replace('data_link_Delete', '');
        
        var lineFound = -1;
        var line = 0;
        $.each(object_id_Created, function( i, val ){
            line++;
            if (val == target_id_additional)
            {
                lineFound = line;
            }
        });
        
        if (lineFound >= 0){
            var $rows = $("#mercyTable tr");
            //lineFound--;
            $rows.eq(lineFound).hide();
            
            // save to Array
            object_id_Deleted.push(target_id_additional);
        }
    }catch(err){}
}

function SaveData(){
    var p = processParameters();
    
    var action = 'Bulk';
    
    // data to AJAX
    $.ajax({
        url: api_Request + '/Api/Instruments/'+action
        , type: 'POST'
        , data: p
        , dataType: "json"
        , beforeSend: function (request){
            // Set "Token" in HTTP_Header
            request.setRequestHeader(MERCY_Token, MERCY_Token_Value);
        }
        , cache: false
        , success: function (data){
            if ( ! $.trim(data)) {
                // empty data
                return;
            }
            
            if ( ! data.Success){
                alert(data.Message);
                return;
            }
            
            alert('Success');
            
            Populate_DataGrid();
        },
        error: function (error){
            $(this).remove();
        }
    });
}

function processParameters(){
    var arr = [];
    var obj = {};
    var obj2 = {};
    
    try{
        var param_Name = '';
        var param_Value = '';
        var recordId = null;
        var dataProcessed = 0;
        var data_Deleted = '';
        
        $.each(object_id_Created, function(i, val){
            if (object_id_Deleted.indexOf(val) !== -1){
                // this Row will be Deleted
                data_Deleted += param_Value = $('#data_RecordId' + val).val() + ',';
            }else if($('#data_link_Operation' + val).text() == 'Edit'){
                // -- skip it
                // this Row is not changed
            }else{
                // create object
                param_Name = 'RecordId'+dataProcessed.toString();
                param_Value = $('#data_RecordId' + val).val();
                if (param_Value == null || param_Value == '' || param_Value == '-1'){
                    param_Value = '-1';
                }
                obj = {};
                obj[param_Name] = param_Value;
                obj2[param_Name] = param_Value;
                // add to Array
                arr.push(obj);
                
                // create object
                param_Name = 'Status'+dataProcessed.toString();
                param_Value = ValueBit('#data_Status_chk' + val);
                obj = {};
                obj[param_Name] = param_Value;
                obj2[param_Name] = param_Value;
                // add to Array
                arr.push(obj);
                
                // create object
                param_Name = 'InstrumentName'+dataProcessed.toString();
                param_Value = $('#data_InstrumentName_txt' + val).val();
                obj = {};
                obj[param_Name] = param_Value;
                obj2[param_Name] = param_Value;
                // add to Array
                arr.push(obj);
                
                dataProcessed++;
            }
        });
        
        // create object
        param_Name = 'Deleted';
        param_Value = data_Deleted;
        obj = {};
        obj[param_Name] = param_Value;
        obj2[param_Name] = param_Value;
        // add to Array
        arr.push(obj);
        
        obj2['InstrumentType'] = $('#ddl_InstrumentType').val();
    }catch(err){}
    
    return obj2;
}

var data_InstrumentType_current = 'Lab Consumable';

function Create_InstrumentType() {
    $('#ddl_InstrumentType').select2();

    $('#ddl_InstrumentType').change(function (e) {
        ddl_InstrumentType_Change();
    });
    
    // Inisial value for "Sampling Type"
    $('#ddl_InstrumentType').val(data_InstrumentType_current).trigger('change');
}


// Flag for "Special purpose"
var ddl_InstrumentType_Change_must_be_run = true;
    
function ddl_InstrumentType_Change() {
    if (!ddl_InstrumentType_Change_must_be_run) {
        // reset to default
        ddl_InstrumentType_Change_must_be_run = true;
        return;
    }
    
    Populate_DataGrid();
    //console.log('Fired Event');
}

</script>
